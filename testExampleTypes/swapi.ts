/**
 * This file is used to check the compile-time generated types of our swapi example.
 * It's useful to make sure that the types generated by the codegen process match the expected types of the resources and loaders.
 */
import { expectTypeOf } from 'expect-type';
import type { LoadersType } from '../examples/swapi/swapi-loaders';
import type { SWAPI_Planet, SWAPI_Root } from '../examples/swapi/swapi';

// Check that each of our resources has a corresponding loader
expectTypeOf<keyof LoadersType>().toEqualTypeOf<
    'getPlanets' | 'getPeople' | 'getVehicles' | 'getFilms' | 'getFilmsV2' | 'getRoot'
>();

// Check that the param type of a resource and an unbatched dataloader matches
expectTypeOf<Parameters<LoadersType['getRoot']['load']>>().toEqualTypeOf<[args: {}]>();

// Check that the return type of a resource and an unbatched dataloader matches
expectTypeOf<Awaited<ReturnType<LoadersType['getRoot']['load']>>>().toEqualTypeOf<SWAPI_Root>();

// Check that the param type of a resource and a batches dataloader matches
expectTypeOf<Parameters<LoadersType['getPlanets']['load']>>().branded.toEqualTypeOf<[args: { planet_id: number }]>();

// Check that the return type of a resource and a batched dataloader matches
expectTypeOf<Awaited<ReturnType<LoadersType['getPlanets']['load']>>>().toEqualTypeOf<SWAPI_Planet>();

// Check that the param type of isBatchKeyASet: true matches
expectTypeOf<Parameters<LoadersType['getFilms']['load']>>().branded.toEqualTypeOf<[args: { film_id: number }]>();
